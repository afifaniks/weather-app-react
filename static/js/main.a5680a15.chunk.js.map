{"version":3,"sources":["components/navbar.js","components/overview.js","components/forecast.js","components/dashboard.js","components/footer.js","App.js","index.js"],"names":["MyNav","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","Overview","time","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","Media","object","src","this","data","icon","style","height","width","temp","description","location","country","coordinates","toFixed","wind","humidity","timestampConverter","sunrise","sunset","Component","a","API_URL","fetch","response","json","Forecast","state","reload","getForecast","bind","tableRow","callAPIAsync","then","console","log","setState","map","row","split","parseFloat","feelsLike","maxTemp","minTemp","desc","id","table","filename","sheet","buttonText","Table","responsive","hover","Dashboard","check","temperature","searchBar","search","onInputChange","getGeoLocation","showPosition","getLocationData","event","reg","RegExp","entry","exec","e","target","value","navigator","geolocation","getCurrentPosition","position","isCoord","API_KEY","trim","setWeatherData","Jumbotron","backgroundColor","FormGroup","Input","type","name","placeholder","onChange","Button","border","borderRadius","class","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5680a15.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nexport const MyNav = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\"><strong>V2 Weather</strong></NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/afifaniks/weather-app-react\">Source Code</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://afifaniks.me\">Dev</NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport { Media } from 'reactstrap';\r\nclass Overview extends Component {\r\n    timestampConverter(time) {\r\n        var date = new Date(time * 1000);\r\n        var hours = date.getHours();\r\n        var minutes = \"0\" + date.getMinutes();\r\n        var seconds = \"0\" + date.getSeconds();\r\n\r\n        // Will display time in 10:30:23 format\r\n        var formattedTime = hours + ' : ' + minutes.substr(-2) + ' : ' + seconds.substr(-2);\r\n\r\n        return formattedTime;\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div  className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                <div className=\"col-6 offset-3 d-flex justify-content-center\">\r\n                                        <Media\r\n                                        object src={\"assets/images/\" + this.props.data.icon + \".png\"}\r\n                                        style={{height: \"128px\", width: \"128px\"}}\r\n                                        />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-12 text-center\">\r\n                                <h1 className=\"capitalize\">{this.props.data.temp} °C, {this.props.data.description}</h1>\r\n                            </div>\r\n                            <div className=\"col-12 text-center\">\r\n                                <h3>{this.props.data.location}, {this.props.data.country}</h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-6 d-flex justify-content-center\">\r\n                        <dl className=\"row p-3\">\r\n                                <dt className=\"col-6\"><i className=\"fa fa-globe\"></i> Area</dt>\r\n                                <dd className=\"col-6\">{this.props.data.location}</dd>\r\n                                <dt className=\"col-6\"><i className=\"fa fa-compass\"></i> Coordinates</dt>\r\n                                <dd className=\"col-6\">{this.props.data.coordinates}</dd>\r\n                                <dt className=\"col-6\"><i className=\"fas fa-thermometer-half\"></i> Temperature</dt>\r\n                                <dd className=\"col-6\">{this.props.data.temp} °C / {(this.props.data.temp * 1.8 + 32).toFixed(1)} °F</dd>\r\n                                <dt className=\"col-6\"><i className=\"fas fa-wind\"></i> Wind</dt>\r\n                                <dd className=\"col-6\">{this.props.data.wind}</dd>\r\n                                <dt className=\"col-6\"><i className=\"fas fa-tint\"></i> Humidity</dt>\r\n                                <dd className=\"col-6\">{this.props.data.humidity}</dd>\r\n                                <dt className=\"col-6\"><i className=\"fas fa-sun\"></i> Sunrise</dt>\r\n                                <dd className=\"col-6\">{this.timestampConverter(this.props.data.sunrise)}</dd>\r\n                                <dt className=\"col-6\"><i className=\"fas fa-moon\"></i> Sunset</dt>\r\n                                <dd className=\"col-6\">{this.timestampConverter(this.props.data.sunset)}</dd>\r\n                        </dl>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Overview;","import React, { Component } from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\r\n\r\nasync function callAPIAsync(location) {\r\n    const API_KEY = \"96990c5c335abd806ce9733346bb487c\";\r\n    const API_URL = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + \r\n                    location +\r\n                    \"&appid=\" + API_KEY;\r\n\r\n    let response = await fetch(API_URL);\r\n    let data = await response.json()\r\n    return data;\r\n}\r\n\r\nclass Forecast extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            location: props.location,\r\n            data: \"\",\r\n            reload: true\r\n        };\r\n\r\n        this.getForecast = this.getForecast.bind(this);\r\n        this.tableRow = this.tableRow.bind(this);\r\n        // this.getForecast();\r\n    }\r\n\r\n    getForecast() {\r\n        callAPIAsync(this.props.location).then(data => {\r\n            // Checking if area exists\r\n            console.log(this.props.location)\r\n            if (data[\"cod\"] == 200) {\r\n                console.log(data);\r\n               this.setState({data: data[\"list\"]});\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    timestampConverter(time) {\r\n        var date = new Date(time * 1000);\r\n        var hours = date.getHours();\r\n        var minutes = \"0\" + date.getMinutes();\r\n        var seconds = \"0\" + date.getSeconds();\r\n\r\n        // Will display time in 10:30:23 format\r\n        var formattedTime = hours + ' : ' + minutes.substr(-2) + ' : ' + seconds.substr(-2);\r\n\r\n        return formattedTime;\r\n    }\r\n\r\n    tableRow() {\r\n        if (this.state.data !== \"\") {\r\n            // console.log(Array.from(this.state.data))\r\n            return this.state.data.map((row) => {\r\n                const date = row[\"dt_txt\"].split(\" \")[0];\r\n                const time = row[\"dt_txt\"].split(\" \")[1];\r\n                const temp = parseFloat(row[\"main\"][\"temp\"] - 273).toFixed(2);\r\n                const  feelsLike = parseFloat(row[\"main\"][\"feels_like\"] - 273).toFixed(2);\r\n                const wind = row[\"wind\"][\"deg\"] + \"°, \" + row[\"wind\"][\"speed\"];\r\n                const humidity = row[\"main\"][\"humidity\"];\r\n                const maxTemp = parseFloat(row[\"main\"][\"temp_max\"] - 273).toFixed(2);\r\n                const minTemp = parseFloat(row[\"main\"][\"temp_min\"] - 273).toFixed(2);\r\n                const desc = row[\"weather\"][0][\"description\"];\r\n                // const sunRise = row[]\r\n                return (\r\n                    <tr>\r\n                        <td>{date}</td>\r\n                        <td>{time}</td>\r\n                        <td>{temp}</td>\r\n                        <td>{feelsLike}</td>\r\n                        <td>{maxTemp}</td>\r\n                        <td>{minTemp}</td>\r\n                        <td>{wind}</td>\r\n                        <td>{humidity}</td>\r\n                        <td className=\"capitalize\">{desc}</td>\r\n                    </tr>\r\n                );\r\n            });\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.props.location !== this.state.location) {\r\n            this.setState({location: this.props.location, reload: true});\r\n        }\r\n        if (this.state.reload) {\r\n            this.getForecast();\r\n            this.setState({reload: false});\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <h2 className=\"col-12 text-center mb-2 mt-4\">5 Day Forecasts (Per 3 hours)</h2>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <ReactHTMLTableToExcel\r\n                        id=\"test-table-xls-button\"\r\n                        className=\"download-table-xls-button\"\r\n                        table=\"weather-data\"\r\n                        filename=\"weather\"\r\n                        sheet=\"weather\"\r\n                        buttonText=\"Export Data\"/>\r\n                    <Table responsive hover id=\"weather-data\">\r\n                        <thead>\r\n                            <tr>\r\n                            <th>Date</th>\r\n                            <th>Time</th>\r\n                            <th>Temp (&deg;C)</th>\r\n                            <th>Feels Like (&deg;C)</th>\r\n                            <th>Max Temp (&deg;C)</th>\r\n                            <th>Min Temp (&deg;C)</th>\r\n                            <th>Wind</th>\r\n                            <th>Humidity</th>\r\n                            <th>Weather</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.tableRow()}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Forecast;","    import React, { Component } from 'react';\r\n    import { Jumbotron, FormGroup, Input, Button } from 'reactstrap';\r\n    import Overview from './overview';\r\nimport Forecast from './forecast';\r\n    class Dashboard extends Component {\r\n        constructor (props) {\r\n            super(props);\r\n            \r\n            this.state = {\r\n                check: true,\r\n                location: \"Kishoreganj,BD\",\r\n                country: \"Bangladesh\",\r\n                coordinates: \"--\",\r\n                temperature: \"--\",\r\n                wind: \"--\",\r\n                humidity: \"--\",\r\n                sunrise: \"--\",\r\n                sunset:\"--\",\r\n                description: \"--\",\r\n                icon: \"unknown\",\r\n                searchBar: \"\",\r\n            }\r\n\r\n            this.search = this.search.bind(this);\r\n            this.onInputChange = this.onInputChange.bind(this);\r\n            this.getGeoLocation = this.getGeoLocation.bind(this);\r\n            this.showPosition = this.showPosition.bind(this);\r\n            this.getLocationData = this.getLocationData.bind(this);\r\n        }\r\n\r\n        search(event) {\r\n            // regex for coordinates\r\n            const reg = new RegExp(\"^-?([1-8]?[1-9]|[1-9]0)\\\\.{1}\\\\d{1,6}\");\r\n            const entry = this.state.searchBar;\r\n\r\n            if (reg.exec(entry)) {\r\n                this.getLocationData(entry, true)\r\n            } else {\r\n                this.getLocationData(entry, false);\r\n            }\r\n        }\r\n\r\n        setWeatherData(data) {\r\n            // console.log(\"Temp\" + data[\"main\"][\"temp\"])\r\n            this.setState({temperature: (parseFloat(data[\"main\"][\"temp\"]) - 273.15).toFixed(1)})\r\n            this.setState({location: data[\"name\"]})\r\n            this.setState({country: data[\"sys\"][\"country\"]})\r\n            this.setState({coordinates: data[\"coord\"][\"lat\"] + \"°, \" + data[\"coord\"][\"lon\"] + \"°\"})\r\n            this.setState({wind: data[\"wind\"][\"deg\"] + \"°, \" + data[\"wind\"][\"speed\"] + \" mps\"})\r\n            this.setState({humidity: data[\"main\"][\"humidity\"] + \"%\"})\r\n            this.setState({sunrise: data[\"sys\"][\"sunrise\"]})\r\n            this.setState({sunset: data[\"sys\"][\"sunset\"]})\r\n            this.setState({description: data[\"weather\"][0][\"description\"]})\r\n            this.setState({icon: data[\"weather\"][0][\"icon\"]})\r\n        }\r\n\r\n        onInputChange (e) {\r\n            this.setState({searchBar: e.target.value});\r\n        }\r\n\r\n        getGeoLocation() {\r\n            if (navigator.geolocation) {\r\n                 navigator.geolocation.getCurrentPosition(this.showPosition);\r\n                } else {\r\n                console.log(\"Geolocation is not supported by this browser.\");\r\n                }\r\n        }\r\n          \r\n          showPosition(position) {\r\n              this.getLocationData(position[\"coords\"][\"latitude\"] +\",\"+position[\"coords\"][\"longitude\"], true);\r\n          }\r\n          \r\n\r\n        getLocationData(location, isCoord) {\r\n            var API_URL = \"\";\r\n            const API_KEY = \"96990c5c335abd806ce9733346bb487c\"\r\n            if (isCoord) {\r\n                location = location.split(\",\");\r\n                API_URL = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + location[0].trim() +\"&lon=\"+ location[1].trim() +\"&appid=\" + API_KEY;\r\n            } else {\r\n                API_URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + location + '&appid=' + API_KEY;\r\n            }\r\n            \r\n            fetch(API_URL)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Checking if area exists\r\n                if (data[\"cod\"] === 200)\r\n                    this.setWeatherData(data);\r\n            });\r\n        }\r\n\r\n        render() {\r\n            if (this.state.check) {\r\n                this.getLocationData(this.state.location);\r\n                this.setState({check: false});\r\n            }\r\n            return (\r\n                <>\r\n                    <Jumbotron style={{backgroundColor: '#9575cd'}}>\r\n                        <Overview data={{\r\n                            temp: this.state.temperature,\r\n                            location: this.state.location,\r\n                            country: this.state.country,\r\n                            humidity: this.state.humidity,\r\n                            coordinates: this.state.coordinates,\r\n                            sunrise: this.state.sunrise,\r\n                            sunset: this.state.sunset,\r\n                            wind: this.state.wind,\r\n                            description: this.state.description,\r\n                            icon: this.state.icon                       \r\n                        }}/> \r\n                        \r\n                        <div className=\"col-12 col-md-6 offset-md-3 mt-4\">\r\n                            <div className=\"row\">\r\n                                <FormGroup className=\"col-9\">\r\n                                    <Input type=\"text\"\r\n                                        id=\"location\"\r\n                                        name=\"location\" \r\n                                        placeholder=\"Input area name or coordinates\"\r\n                                        value={this.state.searchBar}\r\n                                        onChange={this.onInputChange} />                            \r\n                                </FormGroup>\r\n                                <Button\r\n                                    className=\"col-3 search-btn\" \r\n                                    onClick={this.search}\r\n                                    style={{color: \"#000\",                                       \r\n                                            backgroundColor: \"#ffffff\",\r\n                                            border: \"none\",\r\n                                            height: \"54px\",\r\n                                            borderRadius: \"0px 30px 30px 0px\"}}>\r\n                                        Search\r\n                                </Button>                          \r\n                            </div>\r\n                            <div className=\"row\">\r\n                                    <div className=\"col-12  d-flex justify-content-center\">\r\n                                        <Button\r\n                                            onClick={this.getGeoLocation}\r\n                                            style={{color: \"#000\",  \r\n                                                    backgroundColor: \"#ffffff\",\r\n                                                    border: \"none\",\r\n                                                    height: \"54px\",\r\n                                                    borderRadius: \"30px\"}}>\r\n                                                <i class=\"fas fa-map-marker-alt\"></i>&nbsp;&nbsp;Current Location\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                        </div>\r\n                    </Jumbotron>\r\n                    <Forecast location={this.state.location} />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    export default Dashboard;","import React from 'react';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div className=\"row footer mt-2\">\r\n            <div className=\"container\">\r\n                <p className=\"p-2 m-2\">&#169; V2 Weather App, 2020</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { MyNav } from './components/navbar';\nimport Dashboard from './components/dashboard'; \nimport { Footer } from './components/footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyNav />\n      <Dashboard />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}